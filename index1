<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f4f4f4;
        }
        h1 {
            color: #333;
        }
        .game-container {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
            justify-content: center;
            margin-top: 20px;
        }
        .cell {
            width: 100px;
            height: 100px;
            background-color: white;
            border: 2px solid #333;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2em;
            cursor: pointer;
        }
        .cell:hover {
            background-color: #ddd;
        }
        .winner {
            font-size: 1.5em;
            margin-top: 20px;
            color: green;
        }
        button {
            margin-top: 20px;
            padding: 10px;
            font-size: 1em;
            cursor: pointer;
        }
    </style>
</head>
<body>

    <h1>Tic-Tac-Toe</h1>
    <div>
        <button onclick="startGame('human')">2 Players</button>
        <button onclick="startGame('ai')">Play vs AI</button>
    </div>
    <div class="game-container" id="gameBoard"></div>
    <p class="winner" id="winnerText"></p>
    <button onclick="resetGame()">Reset</button>

    <script>
        let board = ["", "", "", "", "", "", "", "", ""];
        let currentPlayer = "X";
        let gameMode = "human"; // Default to human vs human

        function startGame(mode) {
            gameMode = mode;
            resetGame();
        }

        function resetGame() {
            board = ["", "", "", "", "", "", "", "", ""];
            currentPlayer = "X";
            document.getElementById("winnerText").textContent = "";
            renderBoard();
        }

        function renderBoard() {
            const gameBoard = document.getElementById("gameBoard");
            gameBoard.innerHTML = "";
            board.forEach((value, index) => {
                const cell = document.createElement("div");
                cell.classList.add("cell");
                cell.textContent = value;
                cell.addEventListener("click", () => handleMove(index));
                gameBoard.appendChild(cell);
            });
        }

        function handleMove(index) {
            if (board[index] !== "" || checkWinner()) return;

            board[index] = currentPlayer;
            renderBoard();

            if (checkWinner()) {
                document.getElementById("winnerText").textContent = `${currentPlayer} Wins!`;
                return;
            }

            currentPlayer = currentPlayer === "X" ? "O" : "X";

            if (gameMode === "ai" && currentPlayer === "O") {
                setTimeout(aiMove, 500);
            }
        }

        function aiMove() {
            let emptyCells = board.map((val, idx) => (val === "" ? idx : null)).filter(val => val !== null);
            if (emptyCells.length > 0) {
                let randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];
                handleMove(randomIndex);
            }
        }

        function checkWinner() {
            const winPatterns = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
                [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
                [0, 4, 8], [2, 4, 6]             // Diagonals
            ];

            for (let pattern of winPatterns) {
                let [a, b, c] = pattern;
                if (board[a] && board[a] === board[b] && board[a] === board[c]) {
                    return true;
                }
            }

            if (!board.includes("")) {
                document.getElementById("winnerText").textContent = "It's a Draw!";
                return true;
            }

            return false;
        }

        renderBoard();
    </script>

</body>
</html>
